initSidebarItems({"attr":[["__wasm_bindgen_class_marker",""],["wasm_bindgen",""]],"derive":[["Properties",""]],"enum":[["Callback","Universal callback wrapper."],["ChangeData","A type representing change of value(s) of an element after committed by user (onchange event)."]],"fn":[["__wasm_bindgen_generated_run_app","Entry point."],["run_app","Entry point."],["setup_ecs","Sets up legion ECS."]],"macro":[["classes",""],["html",""],["html_nested",""]],"mod":[["app",""],["camera","Provides a camera resource to store the view perspective of the user."],["config","Hardcoded client constants"],["html","The main html module which defines components, listeners, and class helpers."],["input","Handles user input."],["options","Client settings"],["render","Manages client-side graphics rendering."],["style","Styles for yew"],["util","Miscellaneous utilities."]],"struct":[["AnimationEvent","The `AnimationEvent` class."],["App","An instance of an application."],["Classes","A set of classes."],["Closure","A handle to both a closure in Rust as well as JS closure which will invoke the Rust closure."],["ContextPath","A component that stores the context path of the game definition."],["DragEvent","The `DragEvent` class."],["ErrorEvent","The `ErrorEvent` class."],["Event","The `Event` class."],["FocusEvent","The `FocusEvent` class."],["InputData","A type representing data from `oninput` event."],["InputEvent","The `InputEvent` class."],["JsValue","Representation of an object owned by JS."],["KeyboardEvent","The `KeyboardEvent` class."],["MouseEvent","The `MouseEvent` class."],["NodeRef","Wrapped Node reference for later use in Component lifecycle methods."],["PointerEvent","The `PointerEvent` class."],["ProgressEvent","The `ProgressEvent` class."],["TouchEvent","The `TouchEvent` class."],["TransitionEvent","The `TransitionEvent` class."],["UiEvent","The `UiEvent` class."],["WheelEvent","The `WheelEvent` class."]],"trait":[["Component","Components are the basic building blocks of the UI in a Yew app. Each Component chooses how to display itself using received props and self-managed state. Components can be dynamic and interactive by declaring messages that are triggered and handled asynchronously. This async update mechanism is inspired by Elm and the actor model used in the Actix framework."],["Properties","Trait for building properties for a component"],["UnwrapThrowExt","An extension trait for `Option<T>` and `Result<T, E>` for unwraping the `T` value, or throwing a JS error if it is not available."]],"type":[["Children","A type used for accepting children elements in Component::Properties."],["ChildrenWithProps","A type used for accepting children elements in Component::Properties and accessing their props."],["ComponentLink","Link to componentâ€™s scope for creating callbacks."],["Html","A type which expected as a result of `view` function implementation."],["ShouldRender","This type indicates that component should be rendered again."]]});