initSidebarItems({"enum":[["CoreError","Error in the core module."],["Indices","An array of indices. Supports different data types."],["ProjectionType","The type of projection used by a camera (orthographic or perspective) including parameters."]],"mod":[["buffer","Different types of buffers used for sending data (primarily geometry data) to the GPU."],["math","Basic math functionality. Mostly just an re-export of cgmath."],["render_states","Definitions of the input state needed for any draw call."],["render_target","Functionality for rendering to the screen or into textures."],["texture","Different types of textures used by the GPU to read from and write to."]],"struct":[["AxisAlignedBoundingBox","A bounding box that aligns with the x, y and z axes."],["CPUMaterial","A CPU-side version of a material. Can be constructed manually or loaded via io."],["CPUMesh","A CPU-side version of a triangle mesh. Can be constructed manually or loaded via io or via the utility functions for generating simple triangle meshes."],["Camera","Used in a render call to define how to view the 3D world."],["Color","Represents a color composed of a red, green and blue component. In addition, the alpha value determines the how transparent the color is (0 is fully transparent and 255 is fully opaque)."],["Context","Contains information about the graphics context to use for rendering and other “global” variables."],["ImageCubeEffect","A customizable cube effect. Used for rendering into all 6 sides of a cube map texture."],["ImageEffect","A customizable 2D effect. Can for example be used for adding an effect on top of a rendered image."],["Mesh","A triangle mesh where the mesh data is transfered to the GPU."],["Program","A shader program consisting of a programmable vertex shader followed by a programmable fragment shader. Functionality includes transferring per vertex data to the vertex shader (see the use_attribute functionality) and transferring uniform data to both shader stages (see the use_uniform and use_texture functionality) and execute the shader program (see the draw functionality)."],["Viewport","Defines the part of the screen/render target that is rendered to."]]});