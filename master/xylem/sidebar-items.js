initSidebarItems({"derive":[["Xylem","Derives a [`Xylem`] implementation for a struct or enum and the corresponding [`Xylem::From`] type."]],"macro":[["declare_schema","Declare a normal schema type."]],"mod":[["id","Generates dynamically resolved identifiers."]],"struct":[["DefaultContext","A [`Context`] implementation based on [`typemap::TypeMap`]."],["NoArgs","The default empty argument type."]],"trait":[["AbstractError","The error type for a schema."],["ArcSchemaExt","Implement this trait for a schema type to support standard [`Arc`] conversion."],["BTreeMapSchemaExt","Implement this trait for a schema type to support standard [`HashMap`] conversion."],["BoxSchemaExt","Implement this trait for a schema type to support standard box conversion."],["Context","The context of a conversion."],["HashMapSchemaExt","Implement this trait for a schema type to support standard [`HashMap`] conversion."],["OptionSchemaExt","Implement this trait for a schema type to support standard [`Option`] conversion."],["Processable","Preprocessor and postprocessor extensions for [`Xylem`]."],["RcSchemaExt","Implement this trait for a schema type to support standard [`Rc`] conversion."],["Schema","The schema type for a specific set of conversion rules."],["SchemaExt","Implement this trait for a schema type to implement “standard” conversions."],["VecSchemaExt","Implement this trait for a schema type to support standard [`Vec`] conversion."],["Xylem","Implementors of this trait have a special conversion rule under the schema `Schema`."]]});