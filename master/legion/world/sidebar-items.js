initSidebarItems({"enum":[["ArchetypeAccess","Describes which archetypes are available for access."],["ComponentAccess","Describes which components are available for access."],["ComponentError","An error type which describes why an attempt to retrieve a component failed."],["EntityAccessError","Error type representing a failure to access entity data."],["EntityRewrite","Describes how a merger wishes `Entity` references inside cloned components to be rewritten."],["Event","Events emitted by a world to subscribers. See `World.subscribe(Sender, EntityFilter)`."]],"struct":[["Allocate","An iterator which yields new entity IDs."],["Duplicate","A [`Merger`] which clones entities from the source world into the destination, potentially performing data transformations in the process."],["Entity","An opaque identifier for an entity."],["EntityLocation","The storage location of an entity’s data."],["Entry","Provides safe read and write access to an entity’s components, and the ability to modify the entity."],["EntryMut","Provides safe read and write access to an entity’s components."],["EntryRef","Provides safe read-only access to an entity’s components."],["LocationMap","A map of entity IDs to their storage locations."],["Permissions","Describes read and write access to resources."],["StorageAccessor","Provides access to the archetypes and entity components contained within a world."],["SubWorld","Provides access to a subset of the entities of a `World`."],["World","A container of entities."],["WorldId","Unique identifier for a [`World`]."],["WorldOptions","Describes configuration options for the creation of a new [`World`]."]],"trait":[["EntityStore","The `EntityStore` trait abstracts access to entity data as required by queries for both [`World`] and [`SubWorld`]"],["EventSender","Describes a type which can send entity events."],["Merger","Describes how to merge two [World]s."]],"type":[["EntityHasher","A hasher optimized for entity IDs."]]});